#!/bin/bash
#
# move - part of the Arch-Setup project
# Copyright (C) 2024-2025, JustScott, development@justscott.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#
# move is a simple and reliable way to backup your system
#


# remove '/tmp/' once stable (and change 'example')
#  (or change to $HOME/<name> ?
BACKUP_FILE_BASENAME=packed_system

DATA_DIRECTORY=$HOME/.config/move
BACKUP_PATHS_FILE=$DATA_DIRECTORY/backup_paths

SUPPORTED_APPS_TEMP_PATH=/tmp/move_supported_app_files
mkdir -p $SUPPORTED_APPS_TEMP_PATH


display_help() {
    echo -e "\nUsage: move [COMMAND]"
    echo -e "\nMove or backup all your important files in an encrypted tar.gz archive"

    echo -e "\nCommands:"
    printf "\t%-15s %-1s\n" "pack" "'packs' all your files into a single directory or compressed file, ready for moving" 
    printf "\t%-15s %-1s\n" "unpack" "'unpacks' all your files and places them around the system" 
    printf "\t%-15s %-1s\n" "version" "Returns version information"

    echo -e "\nExamples:"
    echo -e "\t\`move pack\`"

    echo ""
}

encrypt() {
    while :
    do
        openssl enc \
            -a -aes-256-cbc -pbkdf2 --iter 1000000 \
            -in $1 -out $1.aes 2> /dev/null

        # Only exit the loop if the encryption succeeds
        [[ $? == 0 ]] \
            && return 0 \
            || echo -e "\n - Encryption keys don't match... try again - \n"
    done
}

#
# If a supported app is installed, back it up
#
calcurse_pack() {
    { which calcurse || type calcurse; } &>/dev/null && {
        calcurse --export > $SUPPORTED_APPS_TEMP_PATH/calcurse.ical
    }
}
#notes_pack() {
#    { which notes || type notes; } &>/dev/null && {
#        if [[ -d $HOME/notes ]]
#        then
#            notes pack
#            return 0
#        else
#            return 1
#        fi
#    }
#}

pack() {
    [[ -d $DATA_DIRECTORY ]] || {
        echo -e "\n - [ERROR] $DATA_DIRECTORY doesn't exist... creating & exiting - \n"
        mkdir -p $DATA_DIRECTORY
        exit 1
    }

    # unset flag variables before match, for safety
    local unset skipped_command_input

    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            "--noconfirm" | "-y")
                [[ -n "$noconfirm_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the 'noconfirm' flag - \n"
                    exit 1
                }
                local noconfirm_flag="--noconfirm"
            ;;
            *) 
                [[ "$arg" == "pack" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }
            ;;
        esac
    done


    if ! [[ -f $BACKUP_PATHS_FILE ]]
    then
        echo "[ERROR] Must create a '$BACKUP_PATHS_FILE' file first"
        return 1
    fi

    # Save backup of existing packed file incase the current pack fails
    [[ -f $BACKUP_FILE_BASENAME.tar.aes.gz ]] \
        && cp $BACKUP_FILE_BASENAME.tar.aes.gz $BACKUP_FILE_BASENAME.tar.aes.gz.bak &>/dev/null

    source $BACKUP_PATHS_FILE # imports the 'paths' array
    

    calcurse_pack
    #notes_pack && paths+=($HOME/packed_notes.tar.aes)

    paths+=($SUPPORTED_APPS_TEMP_PATH)

    ORIGINAL_PWD=$PWD
    cd / # Ensure the user provided full paths from root
    # Verify all paths exist
    for path in ${paths[@]}
    do
        [[ -d $path || -f $path ]] || {
            echo -e "\n - [ERROR] $path from 'backup_paths' doesn't exist (must provide full path from '/') - \n"
            exit 1
        }
    done
    cd $ORIGINAL_PWD

    if tar -czf $BACKUP_FILE_BASENAME.tar.gz ${paths[@]}
    then
        echo "Encrypting compressed backup file..."
        if encrypt $BACKUP_FILE_BASENAME.tar.gz
        then
            shred -uz $BACKUP_FILE_BASENAME.tar.gz
            echo -e "\n - [SUCCESS] File packed to: $BACKUP_FILE_BASENAME.tar.gz.aes - \n"
            return 0
        else
            echo -e "\n - [ERROR] Couldn't encrypt compressed file: '$BACKUP_FILE_BASENAME.tar.gz' - \n"
            [[ -f $BACKUP_FILE_BASENAME.tar.aes.gz.bak ]] \
                && cp $BACKUP_FILE_BASENAME.tar.aes.gz.bak $BACKUP_FILE_BASENAME.tar.aes.gz
            return 1
        fi
    else
        echo -e "\n - [ERROR] compression failed! - \n"
        [[ -f $BACKUP_FILE_BASENAME.tar.aes.gz.bak ]] \
            && cp $BACKUP_FILE_BASENAME.tar.aes.gz.bak $BACKUP_FILE_BASENAME.tar.aes.gz
        return 1
    fi
}


######################################

calcurse_unpack() {
    if { which calcurse || type calcurse; } &>/dev/null
    then
        if [[ -f $SUPPORTED_APPS_TEMP_PATH/calcurse.ical ]]
        then
            mkdir -p $HOME/.config/calcurse
            # Save an infinite number of backups, as to not lose any data by accident
            calcurse_backup_file_path="$HOME/.config/calcurse/calcurse-$(date +"%B-%e_%H-%M-%S").ical.bak"
            if calcurse --export > $calcurse_backup_file_path
            then
                echo "Created a backup of your existing calcurse ical data at: '$calcurse_backup_file_path'"
                rm -rf $HOME/.local/share/calcurse/* || {
                    echo "[ERROR] Failed to remove existing calcurse data... stopping to prevent duplicating data"
                    echo -e "\n\t* Your packed calcurse.ical file is stored at $SUPPORTED_APPS_TEMP_PATH if you'd"
                    echo -e "\t     like to manually import the data"
                }
            fi

            if calcurse --import $SUPPORTED_APPS_TEMP_PATH/calcurse.ical &>/dev/null
            then
                echo "Packed calcurse.ical file imported!"
                return 0
            else
                echo "[ERROR] Failed to import calcurse ical data stored at: '$SUPPORTED_APPS_TEMP_PATH/calcurse.ical'"
                return 1
            fi
        fi
    fi
}

unpack() {
    # unset flag variables before match, for safety
    local unset skipped_command_input

    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            "--noconfirm" | "-y")
                [[ -n "$noconfirm_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the 'noconfirm' flag - \n"
                    exit 1
                }
                local noconfirm_flag="--noconfirm"
            ;;
            *) 
                [[ "$arg" == "unpack" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }
            ;;
        esac
    done


    if ! [[ -f $BACKUP_FILE_BASENAME.tar.gz.aes ]]
    then
        echo "No '$BACKUP_FILE_BASENAME.tar.gz.aes' file found, exiting..."
        return 1
    fi

    echo "Decrypting Backup..."
    while :
    do
        # Decrypt the backup
        openssl enc -d -a -aes-256-cbc -pbkdf2 --iter 1000000 \
            -in $BACKUP_FILE_BASENAME.tar.gz.aes \
            -out $BACKUP_FILE_BASENAME.tar.gz 2> /dev/null

        tar --list --file $BACKUP_FILE_BASENAME.tar.gz &>/dev/null \
            && break \
            || echo -e "\n - Incorrect decryption key... try again - \n"
    done

    ORIGINAL_PWD=$PWD
    cd / # must be in root since the user gives the full paths of files to pack

    if tar -xf $ORIGINAL_PWD/$BACKUP_FILE_BASENAME.tar.gz &>/dev/null
    then
        shred -uz $ORIGINAL_PWD/$BACKUP_FILE_BASENAME.tar.gz
        echo "Unpacked: '$BACKUP_FILE_BASENAME.tar.gz' successfully!"

        calcurse_unpack

        return 0
    else
        echo -e "\n[ERROR] Failed to decompress the unencrypted '$BACKUP_FILE_BASENAME.tar.gz' file"
        echo -e "\n\t* If your \$HOME directory (your username) has changed since you've created"
        echo -e "\t   $BACKUP_FILE_BASENAME.tar.gz.aes, consider changing your users home directory"
        echo -e "\t   temporarily for the unpack. You can then run 'move pack' to create a new pack"
        echo -e "\t   file with your current \$HOME directory."
        return 1
    fi
}

case $1 in
    "pack")          pack;;
    "unpack")        unpack;;
    "version"|"--version") echo "0.1.0";;
    ""|"--help"|"-h") display_help;;
    *) 
        echo -e "\n - [ERROR] Invalid use of the \`move\` command -";
        display_help
        exit 1
        ;;
esac
