#!/bin/bash
#
# vm - part of the Arch-Setup project
# Copyright (C) 2024, JustScott, development@justscott.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#
# Simple to use CLI tool combining some abilities from `virt-manager`,
#  `virt-viewer`(optional), and `virsh` to make managing VMs from the 
#   terminal easy
#

# Check that the required packages are installed
check_packages() {
    required_packages=(virsh virt-manager)

    for package in ${required_packages[@]}; do 
        $package --version &>/dev/null \
            || { echo -e "\n - [ERROR] $package must be installed - \n"; missing_packages=true; } 
    done

    [[ $missing_packages = true ]] && exit 3
}


declare -A vm_states=()

parse_vm_states() {
    running=$(virsh list --state-running | awk 'NR > 2 { print $2 }')
    paused=$(virsh list --state-paused | awk 'NR > 2 { print $2 }')
    saved=$(virsh list --all --with-managed-save | awk 'NR > 2 { print $2 }' )
    off=$(virsh list --inactive --without-managed-save | awk 'NR > 2 { print $2 }')
}

populate_vm_states() {
    parse_vm_states

    for vm_name in $running; do
        vm_states[$vm_name]="running"
    done

    for vm_name in $paused; do
        vm_states[$vm_name]="paused"
    done

    for vm_name in $saved; do
        vm_states[$vm_name]="saved"
    done

    for vm_name in $off; do
        vm_states[$vm_name]="off"
    done
}

open_vm() {
    populate_vm_states

    # unset flag variables before match, for safety
    unset fullscreen_virt_viewer_flag \
        virt_viewer_flag \
        vm_names \
        skipped_command_input \
        open_in_console_flag

    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            "--console" | "-c")
                [[ -n "$virt_viewer_flag" ]] && {
                    echo -e "\n - [ERROR] Cannot pass the virt-viewer and console flags together - \n"
                    exit 1
                }
                [[ -n "$fullscreen_virt_viewer_flag" ]] && {
                    echo -e "\n - [ERROR] Cannot pass the fullscreen and console flags together - \n"
                    exit 1
                }

                [[ -n "$open_in_console_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated console flag - \n"
                    exit 1
                }
                open_in_console_flag="--console"
            ;;
            "--virt-viewer" | "-V")
                [[ -n "$open_in_console_flag" ]] && {
                    echo -e "\n - [ERROR] Cannot pass the virt-viewer and console flags together - \n"
                    exit 1
                }

                [[ -n "$virt_viewer_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated virt-viewer flag - \n"
                    exit 1
                }

                virt-viewer --version &>/dev/null \
                    && virt_viewer_flag='-V' \
                    || { echo -e "\n - [ ERROR ] virt-viewer not installed - \n"; exit 3; } 
            ;;
            "--fullscreen" | "-f")
                [[ -n "$open_in_console_flag" ]] && {
                    echo -e "\n - [ERROR] Cannot pass the fullscreen and console flags together - \n"
                    exit 1
                }

                [[ -n "$fullscreen_virt_viewer_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated fullscreen flag - \n"
                    exit 1
                }
                [[ -n "$virt_viewer_flag" ]] \
                    && fullscreen_virt_viewer_flag="-f" \
                    || {
                        echo -e "\n - [ERROR] can only open VM in fullscreen with virt-viewer - \n"
                        exit 1
                    } 
            ;;
            *) 
                [[ "$arg" == "open" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }
                vm_names+=($arg)
            ;;
        esac
    done

    [[ -z ${vm_names[@]} ]] && {
        echo -e "\n - [ERROR] must pass at least one VM name - \n"
        exit 1
    }

    for vm_name in ${vm_names[@]}; do
        [[ -n "${vm_states[$vm_name]}" ]] || { 
            echo -e "\n - [ERROR] VM '$vm_name' Doesn't exist - \n"
            exit 2
        } 

        if [[ "$open_in_console_flag" == "--console" ]]
        then
            virsh console $vm_name
        else
            if [[ -n "$virt_viewer_flag" ]]
            then
                nohup virt-viewer -a $fullscreen_virt_viewer_flag "$vm_name" \
                    &> /tmp/${vm_name}_virt_viewer.log &
                echo "virt-viewer stdin and stdout will be written to /tmp/${vm_name}_virt_viewer.log"
            else
                virt-manager -c qemu:///session --show-domain-console "$vm_name"
            fi
        fi
    done
}

save_vm() {
    populate_vm_states

    # unset flag variables before match, for safety
    unset save_to_file_flag \
        vm_names \
        skipped_command_input \
        save_to_file_flag \
        file_path
    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            "--file" | "-F")
                [[ -n "$save_to_file_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated file flag - \n"
                    exit 1
                }
                save_to_file_flag=true
            ;;
            *) 
                [[ "$arg" == "save" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }
                [[ "$save_to_file_flag" == "true" && -z "$file_path" ]] && {
                    file_path="$arg"
                    continue
                }

                vm_names+=($arg)
            ;;
        esac
    done

    [[ -z ${vm_names[@]} ]] && {
        echo -e "\n - [ERROR] must pass at least one VM name - \n"
        exit 1
    }
    
    [[ ${#vm_names[@]} > 1 && -n "$file_path" ]] && {
        echo -e "\n - [ERROR] Cannot pass multiple VM names while manually setting file path - \n"
        exit 1
    }

    for vm_name in ${vm_names[@]}; do
        [[ -n "${vm_states[$vm_name]}" ]] || {
            echo -e "\n - [ERROR] VM '$vm_name' Doesn't exist - \n"
            exit 2
        }

        if [[ "${vm_states[$vm_name]}" == "running" || "${vm_states[$VM_NAME]}" == "paused" ]]
        then
            if [[ $save_to_file_flag == true && -n "$file_path" ]]
            then 
                virsh save --verbose $vm_name $file_path
            else 
                virsh managedsave --verbose $vm_name
            fi
        else
            echo -e "\n - [ERROR] Cannot save VM if it's not running or paused - \n"
            exit 1
        fi
    done
}

display_help() {
    echo -e "\nUsage: vm [COMMAND]"
    echo -e "\nAbstracts commands from virsh, virt-manager, and"
    echo -e " optionally virt-viewer, to more easily manage Virtual"
    echo -e " Machines from the terminal.\n"

    echo "Commands:"
    printf "\t%-15s %-1s\n" "list" "List the VMs and their states"
    printf "\t%-15s %-1s\n" "start" "Start one or more saved or off VMs"
    printf "\t%-15s %-1s\n" "shutdown" "Shutdown one or more running VMs"
    printf "\t%-15s %-1s\n" "open" "Open one or more VMs with virt-manager or virt-viewer"
    printf "\t%-15s %-1s\n" "save" "Save one or more VM states"
    printf "\t%-15s %-1s\n" "is-running" "Returns 0 if the VMs are running, otherwise returns 1"
    printf "\t%-15s %-1s\n" "version" "Returns version information"

    echo -e "\nCommand Flags:\n"
    echo -e "\tstart:"
    printf "\t    %-20s\t %-1s\n" "-o | --open" "Open the VM with virt-manager"
    printf "\t    %-20s\t %-1s\n" "-V | --virt-viewer" "Open the VM with virt-viewer instead of virt-manager"
    printf "\t    %-20s\t %-1s\n" "-f | --fullscreen" "Pass with the virt-viewer flag to open in fullscreen"
    printf "\t    %-20s\t %-1s\n" "-c | --console" "Open the VMs serial console in your terminal."
    printf "\t    %-20s\t %-1s\n" "-F | --file" "Restore VM from a manually saved VM state file. Only the file name with no additional flags should be passed."
    echo -e "\topen:"
    printf "\t    %-20s\t %-1s\n" "-V | --virt-viewer" "Open with virt-viewer instead of virt-manager"
    printf "\t    %-20s\t %-1s\n" "-f | --fullscreen" "Pass with the virt-viewer flag to open in fullscreen"
    printf "\t    %-20s\t %-1s\n" "-c | --console" "Open the VMs serial console in your terminal."
    echo -e "\tsave:"
    printf "\t    %-20s\t %-1s\n" "-F | --file" "Manually save VM state to a file. Only the VM name and location should be passed with no additional flags."

    echo -e "\nExamples:"
    echo -e "\t\`vm list\`"
    echo -e "\t\`vm start --open <vm_name1> <vm_name2>\`"
    echo -e "\t\`vm start -c <vm_name>\`"
    echo -e "\t\`vm start --virt-viewer <vm_name1> <vm_name2>\`"
    echo -e "\t\`vm start -V <vm_name1>\`"
    echo -e "\t\`vm start --file </some/path/vm_save_file.save>\`"
    echo -e "\t\`vm shutdown <vm_name1> <vm_name2>\`"
    echo -e "\t\`vm open -V -f <vm_name1> <vm_name2>\`"
    echo -e "\t\`vm save <vm_name1>\`                                   # Will be managed by virsh"
    echo -e "\t\`vm save <vm_name1> -f </some/path/vm_save_file.save>\` # Manage on your own"
    echo -e "\t\`vm is-running <vm_name1> <vm_name2> && echo 'all VMs running!'\`"

    echo -e "\nError Codes:"
    printf "\t%-3s %-1s\n" "1" "Invalid command (also used to indicate VM not running for the \`is-running\` command."
    printf "\t%-3s %-1s\n" "2" "VM doesn't exist"
    printf "\t%-3s %-1s\n" "3" "Missing dependencies"
}

list_vms() {
    parse_vm_states

    # Print the header
    printf "\n %-30s   %-10s\n" "Name" "State"
    echo "------------------------------------------"

    # Print running VMs
    for vm_name in $running; do
        printf " %-30s   %-10s\n" "$vm_name" "running"
    done

    # Print running VMs
    for vm_name in $paused; do
        printf " %-30s   %-10s\n" "$vm_name" "paused"
    done

    # Print saved VMs
    for vm_name in $saved; do
        printf " %-30s   %-10s\n" "$vm_name" "saved"
    done

    # Print off VMs
    for vm_name in $off; do
        printf " %-30s   %-10s\n" "$vm_name" "off"
    done
}

start_vm() {
    populate_vm_states

    # unset flag variables before match, for safety
    unset open_flag \
        virt_viewer_flag \
        fullscreen_virt_viewer_flag \
        vm_names \
        skipped_command_input \
        restore_from_file_flag \
        file_path \
        open_in_console_flag
    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            "--file" | "-F")
                [[ -n "$save_to_file_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated file flag - \n"
                    exit 1
                }
                restore_from_file_flag=true
            ;;
            "--open" | "-o")
                [[ -n "$open_in_console_flag" ]] && {
                    echo -e "\n - [ERROR] Cannot pass the open and console flags together - \n"
                    exit 1
                }

                [[ -n "$open_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated open flag - \n"
                    exit 1
                }
                open_flag=true
            ;;
            "--console" | "-c")
                [[ -n "$open_flag" ]] && {
                    echo -e "\n - [ERROR] Cannot pass the open and console flags together - \n"
                    exit 1
                }

                [[ -n "$open_in_console_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated console flag - \n"
                    exit 1
                }
                open_in_console_flag="--console"
            ;;
            "--virt-viewer" | "-V")
                [[ -n "$virt_viewer_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated virt-viewer flag - \n"
                    exit 1
                }

                virt-viewer --version &>/dev/null \
                    && virt_viewer_flag='-V' \
                    || { echo -e "\n - [ERROR] virt-viewer not installed - \n"; exit 3; } 

                open_flag=true
            ;;
            "--fullscreen" | "-f")
                [[ -n "$fullscreen_virt_viewer_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated fullscreen flag - \n"
                    exit 1
                }
                [[ -n "$virt_viewer_flag" ]] \
                    && fullscreen_virt_viewer_flag="-f" \
                    || { 
                        echo -e "\n - [ERROR] full screen requires the virt-viewer and open flags - \n"
                        exit 1
                    } 
            ;;
            *)
                [[ "$arg" == "start" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }

                [[ "$restore_from_file_flag" == "true" && -z "$file_path" ]] && {
                    file_path="$arg"
                    continue
                }

                vm_names+=($arg)
            ;;
        esac
    done

    # file path is only used to restore from file, so no VM name is needed
    #  ! Subject to change to allow other flags
    if [[ -n "$file_path" && -f "$file_path" && -n "${vm_names[@]}" ]]
    then
        echo -e "\n - [ERROR] file path - \n"
        exit 1
    else
        [[ $restore_from_file_flag == true && -n "$file_path" ]] && {
            virsh restore "$file_path"
            exit 0
        }
    fi

    [[ -z ${vm_names[@]} ]] && {
        echo -e "\n - [ERROR] must pass at least one VM name - \n"
        exit 1
    }

    for vm_name in ${vm_names[@]}; do
        [[ -n "${vm_states[$vm_name]}" ]] || {
            echo -e "\n - [ERROR] VM '$vm_name' Doesn't exist - \n"
            exit 2
        }

        if [[ "${vm_states[$vm_name]}" = "saved" ]]
        then
            virsh restore ~/.config/libvirt/qemu/save/$vm_name.save \
                && virsh managedsave-remove "$vm_name" # Only remove if the restore works 
        else
            [[ "${vm_states[$vm_name]}" = "off" ]] && virsh start "$vm_name" || {
                echo "VM '$vm_name' already on...applying flags"
            }
        fi

        #
        # Apply Flags
        #
        [[ $open_flag == true ]] \
            && open_vm $virt_viewer_flag $fullscreen_virt_viewer_flag $vm_name
        [[ "$open_in_console_flag" == "--console" ]] \
            && open_vm $open_in_console_flag $vm_name
    done
}

shutdown_vm() {
    # unset flag variables before match, for safety
    unset vm_names \
        skipped_command_input \
    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            *)
                [[ "$arg" == "shutdown" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }

                vm_names+=($arg)
            ;;
        esac
    done

    [[ -z ${vm_names[@]} ]] && {
        echo -e "\n - [ERROR] must pass at least one VM name - \n"
        exit 1
    }

    for vm_name in ${vm_names[@]}
    do
        if ! virsh shutdown $vm_name 2>/dev/null
        then
            echo "[ERROR] VM '$vm_name' either doesn't exist or isn't running...skipping"
        fi
    done
}

check_is_running() {
    populate_vm_states

    # unset flag variables before match, for safety
    unset vm_names \
        skipped_command_input

    for arg in "${@}"; do
        case $arg in
            *) 
                [[ "$arg" == "is-running" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }
                vm_names+=($arg)
            ;;
        esac
    done

    [[ -z ${vm_names[@]} ]] && {
        echo -e "\n - [ERROR] must pass at least one VM name - \n"
        exit 1
    }
   
    for vm_name in ${vm_names[@]}; do
        [[ -n "${vm_states[$vm_name]}" ]] || { 
            echo -e "\n - [ERROR] VM '$vm_name' Doesn't exist - \n"
            exit 2
        }

        [[ "${vm_states[$vm_name]}" != "running" ]] && {
            exit 1
        }
    done

    exit 0
}

case $1 in
    "list")       check_packages; list_vms;;
    "start")      check_packages; start_vm $@;;
    "shutdown")   check_packages; shutdown_vm $@;;
    "open")       check_packages; open_vm $@;;
    "save")       check_packages; save_vm $@;;
    "is-running") check_packages; check_is_running $@;;
    "version"|"--version") echo "0.1.0";;
    ""|"--help"|"-h") display_help;;
    *) 
        echo -e "\n - [ERROR] Invalid use of the \`vm\` command -";
        display_help
        exit 1
        ;;
esac
