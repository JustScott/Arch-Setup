#!/bin/bash
#
# vm - part of the Arch-Setup project
# Copyright (C) 2023, Scott Wyman, development@scottwyman.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


#
# Simple to use CLI tool combining some abilities from `virt-manager`,
#  `virt-viewer`(optional), and `virsh` to make managing VMs from the 
#   terminal easy
#

# Check that the required packages are installed
required_packages=(virsh virt-manager)

for package in ${required_packages[@]}; do 
    $package --version &>/dev/null \
        || { echo -e "\n - [ERROR] $package must be installed - \n"; missing_packages=true; } 
done

[[ $missing_packages = true ]] && exit 3


declare -A vm_states=()

parse_vm_states() {
    running=$(virsh list --state-running | awk 'NR > 2 { print $2 }')
    paused=$(virsh list --state-paused | awk 'NR > 2 { print $2 }')
    saved=$(virsh list --all --with-managed-save | awk 'NR > 2 { print $2 }' )
    off=$(virsh list --inactive --without-managed-save | awk 'NR > 2 { print $2 }')
}

populate_vm_states() {
    parse_vm_states

    for vm_name in $running; do
        vm_states[$vm_name]="running"
    done

    for vm_name in $paused; do
        vm_states[$vm_name]="paused"
    done

    for vm_name in $saved; do
        vm_states[$vm_name]="saved"
    done

    for vm_name in $off; do
        vm_states[$vm_name]="off"
    done
}

open_vm() {
    populate_vm_states

    #
    # Capture flags
    #
    for arg in "${@:2}";
    do
        case $arg in
            "--virt-viewer" | "-V")
                [[ -z $virt_viewer_flag ]] && {
                    virt-viewer --version &>/dev/null \
                        && virt_viewer_flag=true \
                        || { echo -e "\n - [ ERROR ] virt-viewer not installed - \n"; exit 3; } 
                }
            ;;
            "--fullscreen" | "-f")
                [[ -n "$virt_viewer_flag" ]] \
                    && fullscreen_virt_viewer_flag="-f" \
                    || { echo -e "\n - [ERROR] can only open VM in fullscreen with virt-viewer - \n"; exit 1; } 
            ;;
            *)
                [[ -z "$VM_NAME" ]] && {
                    VM_NAME="$arg"
                }
            ;;
        esac
    done


    [[ -n "${vm_states[$VM_NAME]}" ]] \
        && {
            [[ $virt_viewer_flag == true ]] \
                && {
                    nohup virt-viewer -a $fullscreen_virt_viewer_flag "$VM_NAME" \
                        &> /tmp/${VM_NAME}_virt_viewer.log &
                    echo "virt-viewer stdin and stdout will be written to /tmp/${VM_NAME}_virt_viewer.log"
                } || virt-manager -c qemu:///session --show-domain-console "$VM_NAME"
        } || { echo -e "\n - [ERROR] VM Doesn't exist - \n"; exit 2; } 
}

save_vm() {
    populate_vm_states

    VM_NAME=$2
    SAVE_DIRECTORY=~/.config/libvirt/qemu/save

    [[ "${vm_states[$VM_NAME]}" = "running" || "${vm_states[$VM_NAME]}" = "paused" ]] \
        && virsh managedsave --verbose $VM_NAME \
        || { 
            [[ -n "${vm_states[$VM_NAME]}" ]] \
                && { echo -e "\n - [ERROR] Cannot save VM if it's not running or paused - \n"; exit 1; } \
                || { echo -e "\n - [ERROR] VM Doesn't exist - \n"; exit 2; } 
        }
}

display_help() {
    echo -e "\nUsage: vm [COMMAND]"
    echo -e "\nAbstracts commands from virsh, virt-manager, and"
    echo -e " optionally virt-viewer, to more easily manage Virtual"
    echo -e " Machines from the terminal.\n"

    echo "Commands:"
    printf "\t%-15s %-1s\n" "list" "List the VMs and their states"
    printf "\t%-15s %-1s\n" "start" "Start an off or saved VM"
    printf "\t%-15s %-1s\n" "open" "Open the VMs domain console"
    printf "\t%-15s %-1s\n" "save" "Save a VMs state"
    printf "\t%-15s %-1s\n" "is-running" "Returns 0 if the VM is running, else 1"
    printf "\t%-15s %-1s\n" "version" "Returns version information"

    echo -e "\nCommand Flags:\n"
    echo -e "\tstart:"
    printf "\t    %-20s\t %-1s\n" "-o | --open" "Open the VM with virt-manager"
    printf "\t    %-20s\t %-1s\n" "-V | --virt-viewer" "If the open flag is passed, open with virt-viewer instead of virt-manager"
    printf "\t    %-20s\t %-1s\n" "-f | --fullscreen" "If the open flag is passed, and virt-viewer is being used, open in fullscreen"
    echo -e "\topen:"
    printf "\t    %-20s\t %-1s\n" "-V | --virt-viewer" "Open with virt-viewer instead of virt-manager"
    printf "\t    %-20s\t %-1s\n" "-f | --fullscreen" "If using virt-viewer, open in fullscreen"

    echo -e "\nExamples:"
    echo -e "\t\`vm list\`"
    echo -e "\t\`vm start test_vm\`"
    echo -e "\t\`vm start --open --virt-viewer test_vm\`"
    echo -e "\t\`vm start -o -V test_vm\`"
    echo -e "\t\`vm open -V test_vm\`"
    echo -e "\t\`vm save test_vm\`"
    echo -e "\t\`vm is-running test_vm && echo 'running!'\`"

    echo -e "\nError Codes:"
    printf "\t%-3s %-1s\n" "1" "Invalid command (also used to indicate VM not running for the \`is-running\` command."
    printf "\t%-3s %-1s\n" "2" "VM doesn't exist"
    printf "\t%-3s %-1s\n" "3" "Missing dependencies"
}

list_vms() {
    parse_vm_states

    # Print the header
    printf "\n %-30s   %-10s\n" "Name" "State"
    echo "------------------------------------------"

    # Print running VMs
    for vm_name in $running; do
        printf " %-30s   %-10s\n" "$vm_name" "running"
    done

    # Print running VMs
    for vm_name in $paused; do
        printf " %-30s   %-10s\n" "$vm_name" "paused"
    done

    # Print saved VMs
    for vm_name in $saved; do
        printf " %-30s   %-10s\n" "$vm_name" "saved"
    done

    # Print off VMs
    for vm_name in $off; do
        printf " %-30s   %-10s\n" "$vm_name" "off"
    done
}

start_vm() {
    populate_vm_states

    #
    # Capture flags
    #
    for arg in "${@:2}";
    do
        case $arg in
            "--open" | "-o")
                [[ -z $open_flag ]] && {
                    open_flag=true
                }
            ;;
            "--virt-viewer" | "-V")
                [[ -z $virt_viewer_flag ]] && {
                    virt-viewer --version &>/dev/null \
                        && virt_viewer_flag=true \
                        || { echo -e "\n - [ERROR] virt-viewer not installed - \n"; exit 3; } 
                }
            ;;
            "fullscreen" | "-f")
                [[ -n "$virt_viewer_flag" ]] \
                    && fullscreen_virt_viewer_flag="-f" \
                    || { echo -e "\n - [ERROR] can only open VM in fullscreen with virt-viewer - \n"; exit 1; } 
            ;;
            *)
                [[ -z "$VM_NAME" ]] && {
                    VM_NAME="$arg"
                }
            ;;
        esac
    done

    #
    # Only start if the VM exists and is saved or off
    #
    [[ "${vm_states[$VM_NAME]}" = "saved" ]] && {
        virsh restore ~/.config/libvirt/qemu/save/$VM_NAME.save \
            && virsh managedsave-remove "$VM_NAME" # Only remove if the restore works 
    } || {
        [[ "${vm_states[$VM_NAME]}" = "off" ]] \
            && virsh start "$VM_NAME" \
            || {
                # If the VM exists
                [[ -n "${vm_states[$VM_NAME]}" ]] \
                    && echo -e "\n - VM not in off or saved state, so it cannot be started - \n" \
                    || echo -e "\n - [ERROR] VM Doesn't exist - \n"
                exit 2
            }
    }

    #
    # Apply Flags
    #
    [[ $open_flag == true ]] && \
        open_vm $virt_viewer_flag $fullscreen_virt_viewer_flag "$VM_NAME"
}

check_is_running() {
    populate_vm_states

    VM_NAME="$2"
    
    [[ -n "${vm_states[$VM_NAME]}" ]] && {
        [[ "${vm_states[$VM_NAME]}" == "running" ]] && exit 0 || exit 1
    }
}

case $1 in
    "list")  list_vms;;
    "start") start_vm $@;;
    "open")  open_vm $@;;
    "save")  save_vm $@;;
    "is-running" | "isrunning") check_is_running $@;;
    "version"|"--version") echo "0.1.0";;
    ""|"--help"|"-h") display_help;;
    *) 
        echo -e "\n - [ERROR] Invalid use of the \`vm\` command -";
        display_help
        exit 1
        ;;
esac
