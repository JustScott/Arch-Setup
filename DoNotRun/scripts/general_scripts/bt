#!/bin/bash
#
# bt - part of the Arch-Setup project
# Copyright (C) 2024-2025, JustScott, development@justscott.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#
# Easy to use wrapper around the basic functionality of bluetoothctl
#

STDOUT_LOG_PATH="/dev/null"
STDERR_LOG_PATH="/tmp/bterrors.log"


if ! command -v bluetoothctl &>/dev/null; then
    printf "\e[31m%s\e[0m\n" \
        "[Error] bluetoothctl is not installed. Install bluez-utils." >&2
    exit 1
fi

if rfkill list bluetooth | grep -q "Soft blocked: yes" &>/dev/null
then
    sudo rfkill unblock bluetooth >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
    task_output $! "$STDERR_LOG_PATH" "Remove bluetooth soft block"
    [[ $? -ne 0 ]] && exit 1
fi

display_help() {
    echo -e "\nUsage: bt [COMMAND]"
    echo -e "\nEasy to use wrapper around the basic functionality of bluetoothctl"

    echo "Commands:"
    printf "\t%-15s %-1s\n" "on" "Start bluetooth service and power on"
    printf "\t%-15s %-1s\n" "off" "Power off and stop bluetooth service"
    printf "\t%-15s %-1s\n" "start" "Start bluetooth service"
    printf "\t%-15s %-1s\n" "stop" "Stop bluetooth service"
    printf "\t%-15s %-1s\n" "con" "Start service, power on, and search for/connect to devices"
    printf "\t%-15s %-1s\n" "dis" "Disconnect from a connected device"
    printf "\t%-15s %-1s\n" "version" "Check the bt version"

    echo -e "\nExamples:"
    echo -e "\t\`bt con\` # Use fzf to connect to device"
    echo -e "\t\`bt con <partial or full device name>\` # Connect to closest named device"
}


# Function to show a spinner and handle exit status
task_output() {
    local pid=$1
    local stderr_path=$2
    local task_message="$3"

    local spin_chars="/-\|"

    while kill -0 "$pid" 2>/dev/null; do
        for i in $(seq 0 3); do
            printf "\r\e[36m[%s]\e[0m %s" "${spin_chars:$i:1}" "$task_message"
            sleep 0.1
        done
    done

    # Capture the exit code of the background process
    wait $pid
    local exit_code=$?

    if [ $exit_code -eq 0 ]; then
        printf "\r\e[32m[Success]\e[0m %s\n" "$task_message"
        return 0
    else
        printf "\r\e[31m[Error]\e[0m %s (Exit code: %d)\n" "$task_message" "$exit_code"
        printf "\e[31m[!] Check error log: %s\e[0m\n" "$stderr_path"
        return 1
    fi
}

start_service() {
    if ! systemctl is-active --quiet bluetooth &>/dev/null
    then
        sudo -v
        sudo systemctl start bluetooth >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
        task_output $! "$STDERR_LOG_PATH" "Start bluetooth service"
        [[ $? -ne 0 ]] && return 1
    fi
    return 0
}

stop_service() {
    if systemctl is-active --quiet bluetooth &>/dev/null
    then
        sudo -v
        sudo systemctl stop bluetooth >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
        task_output $! "$STDERR_LOG_PATH" "Stop bluetooth service"
        [[ $? -ne 0 ]] && return 1
    fi
    return 0
}

power_on() {
    if bluetoothctl show | grep -q "Powered: yes"; then
        return 0
    fi

    for i in {1..5}
    do
        bluetoothctl power on >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH"
        if bluetoothctl show | grep -q "Powered: yes" &>/dev/null; then
            printf "\r\e[32m[Success]\e[0m %s\n" "Power on bluetooth"
            return 0
        fi
        sleep 1
    done

    printf "\r\e[31m[Error]\e[0m %s \n" "Power on bluetooth"
    printf "\e[31m[!] Check error log: %s\e[0m\n" "$stderr_path"
    return 1
}

power_off() {
    bluetoothctl power off >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
    task_output $! "$STDERR_LOG_PATH" "Power off bluetooth"
}

remove_inactive_devices() {
    all_devices="$(bluetoothctl devices)"
    connected_devices="$(bluetoothctl devices Connected)"

    #echo "$connected_devices"

    # Ignore connected devices
    if [[ -n "$connected_devices" ]]
    then
        echo "$connected_devices" | while IFS= read -r device_basic_info
        do
            all_devices="$(echo "$all_devices" | grep -i -v "$device_basic_info")"
        done
    fi


    if [[ -n "$all_devices" ]]
    then
        echo "$all_devices" | while IFS= read -r device_basic_info
        do
            device_name="$(echo "$device_basic_info" | cut -d ' ' -f3-)"
            device_mac="$(echo "$device_basic_info" | awk '{print $2}')"
            bluetoothctl remove "$device_mac" >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
            task_output $! "$STDERR_LOG_PATH" "Remove old device: '$device_name'"
            [[ $? -ne 0 ]] && return 1
        done
    fi
}

connect() {
    # unset flag variables before match, for safety
    unset searched_name \
        skipped_command_input \
    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            *)
                [[ "$arg" == "con" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }

                searched_name+=($arg)
            ;;
        esac
    done

    {   printf 'scan off\n\n'
        sleep 1
    } | bluetoothctl >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH"

    remove_inactive_devices # Remove old inactive devices so scan only shows active devices

    for i in {10..0}; do
        printf "\rScanning for \e[36m%s\e[0m seconds" "$i"
        sleep 1
    done &

    {   printf 'scan on\n\n'
        sleep 11
    } | bluetoothctl >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH"

    devices="$(bluetoothctl devices)"

    if [[ -n "$devices" ]]
    then
        if [[ -z "${searched_name[@]}" ]]
        then
            device_basic_info="$(echo "$devices" | fzf --reverse)"
        else
            matched_device="$(echo "$devices" | grep -i "${searched_name[@]}")"
            if [[ -n "$matched_device" ]]
            then
                if [[ $(echo "$matched_device" | wc -l) -gt 1 ]]
                then
                    device_basic_info="$(echo "$matched_device" | fzf --reverse)"
                else
                    device_basic_info="$matched_device"
                fi
            else
                printf "\r\e[31m%s\e[0m\n" "No devices match the name given...stopping"
                exit 1
            fi
        fi
    else
        printf "\r\e[31m%s\e[0m\n" "No Availble Devices...stopping"
        exit 1
    fi

    if [[ -z "$device_basic_info" ]]
    then
        printf "\r\e[31m%s\e[0m\n" "No device selected...stopping"
        return 1
    fi

    device_name="$(echo "$device_basic_info" | cut -d ' ' -f3-)"
    device_mac="$(echo "$device_basic_info" | awk '{print $2}')"
    device_advanced_info="$(bluetoothctl info "$device_mac")"

    if echo "$device_advanced_info" | grep "Paired: no" &>/dev/null
    then
        bluetoothctl pair "$device_mac" >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
        task_output $! "$STDERR_LOG_PATH" "Pair with: '$device_name'"
        [[ $? -ne 0 ]] && return 1
    fi

    if echo "$device_advanced_info" | grep "Connected: no" &>/dev/null
    then
        bluetoothctl connect "$device_mac" >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
        task_output $! "$STDERR_LOG_PATH" "Connect to: '$device_name'"
        [[ $? -ne 0 ]] && return 1
    fi
}

disconnect() {
    # unset flag variables before match, for safety
    unset searched_name \
        skipped_command_input \
    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            *)
                [[ "$arg" == "dis" && -z "$skipped_command_input" ]] && {
                    skipped_command_input=true
                    continue
                }

                searched_name+=($arg)
            ;;
        esac
    done

    devices="$(bluetoothctl devices Connected)"
    
    if [[ -n "$devices" ]]
    then
        if [[ -n "${searched_name[@]}" ]]
        then
            device_basic_info="$(echo "$devices" | grep -i "${searched_name[@]}" | head -n 1)"
        else
            device_basic_info="$(echo "$devices" | fzf --reverse)"
        fi

        if [[ -n "$device_basic_info" ]]
        then
            device_name="$(echo "$device_basic_info" | cut -d ' ' -f3-)"
            device_mac="$(echo "$device_basic_info" | awk '{print $2}')"
            bluetoothctl disconnect "$device_mac" >>"$STDOUT_LOG_PATH" 2>>"$STDERR_LOG_PATH" &
            task_output $! "$STDERR_LOG_PATH" "Disconnect from: '$device_name'"
            [[ $? -ne 0 ]] && return 1
        else
            printf "\e[31m%s\e[0m\n" "[Error] No matchine device" >&2
        fi
    else
        printf "\e[31m%s\e[0m\n" "[Error] No connected devices" >&2
    fi
}


case $1 in
    "con")      start_service && power_on && connect $@;;
    "dis")      disconnect $@;;
    "start")    start_service;;
    "stop")     stop_service;;
    "on")       start_service && power_on;;
    "off")      power_off;;
    "version"|"--version") echo "0.1.0";;
    ""|"--help"|"-h") display_help;;
    *) 
        echo -e "\n - [ERROR] Invalid use of the \`bt\` command -";
        display_help
        exit 1
        ;;
esac
