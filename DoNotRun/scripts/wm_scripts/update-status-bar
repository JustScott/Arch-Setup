#!/bin/bash
# 
# update-status-bar - part of the Arch-Setup project
# Copyright (C) 2023-2025, JustScott, development@justscott.me
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


update-status-bar() {
    CACHE_DIRECTORY=/tmp/status-bar-variables
    CACHE_BRIGHTNESS_FILE=$CACHE_DIRECTORY/brightness_display.log
    CACHE_VOLUME_FILE=$CACHE_DIRECTORY/volume_display.log
    CACHE_BATTERY_FILE=$CACHE_DIRECTORY/battery_display.log
    CACHE_NETWORK_FILE=$CACHE_DIRECTORY/network_display.log
    CACHE_WEATHER_FILE=$CACHE_DIRECTORY/weather_display.log
    CACHE_BLUETOOTH_FILE=$CACHE_DIRECTORY/bluetooth_display.log
    mkdir -p $CACHE_DIRECTORY 
    [[ -f $CACHE_DIRECTORY/brightness_display.log ]] \
        && brightness_display=$(cat $CACHE_BRIGHTNESS_FILE) \
        || echo "" > $CACHE_BRIGHTNESS_FILE
    [[ -f $CACHE_DIRECTORY/volume_display.log ]] \
        && volume_display=$(cat $CACHE_VOLUME_FILE) \
        || echo "" > $CACHE_VOLUME_FILE
    [[ -f $CACHE_DIRECTORY/battery_display.log ]] \
        && battery_display=$(cat $CACHE_BATTERY_FILE) \
        || echo "" > $CACHE_BATTERY_FILE
    [[ -f $CACHE_DIRECTORY/network_display.log ]] \
        && network_display=$(cat $CACHE_NETWORK_FILE) \
        || echo "" > $CACHE_NETWORK_FILE
    [[ -f $CACHE_DIRECTORY/weather_display.log ]] \
        && weather_display=$(cat $CACHE_WEATHER_FILE) \
        || echo "" > $CACHE_WEATHER_FILE
    [[ -f $CACHE_DIRECTORY/bluetooth_display.log ]] \
        && bluetooth_display=$(cat $CACHE_BLUETOOTH_FILE) \
        || echo "" > $CACHE_BLUETOOTH_FILE

    # unset flag variables before match, for safety
    unset brightness_flag \
        volume_flag \
        battery_flag \
        network_flag \
        bluetooth_flag

    #
    # Capture flags
    #
    for arg in "${@}";
    do
        case $arg in
            "--all")
                [[ -n "$all_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the brightness flag - \n"
                    exit 1
                }
                all_flag=true

                brightness_flag=true
                volume_flag=true
                battery_flag=true
                network_flag=true
                weather_flag=true
                bluetooth_flag=true
            ;;
            "--brightness")
                [[ -n "$brightness_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the brightness flag - \n"
                    exit 1
                }
                brightness_flag=true
            ;;
            "--volume")
                [[ -n "$volume_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the volume flag - \n"
                    exit 1
                }
                volume_flag=true
            ;;
            "--battery")
                [[ -n "$battery_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the battery flag - \n"
                    exit 1
                }
                battery_flag=true
            ;;
            "--network")
                [[ -n "$network_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the network flag - \n"
                    exit 1
                }
                network_flag=true
            ;;
            "--weather")
                [[ -n "$weather_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the weather flag - \n"
                    exit 1
                }
                weather_flag=true
            ;;
            "--bluetooth")
                [[ -n "$bluetooth_flag" ]] && {
                    echo -e "\n - [ERROR] duplicated the bluetooth flag - \n"
                    exit 1
                }
                bluetooth_flag=true
            ;;
        esac
    done

    if [[ $brightness_flag == true ]]
    then
        unset brightness_display

        if which xrandr &>/dev/null; then
            primary_screen="$(xrandr | grep -i "primary" | awk '{print $1}')"

            if xrandr --listactivemonitors | grep "$primary_screen" &>/dev/null
            then
                brightness_percentage=$(brightness)
                [[ -n $brightness_percentage ]] && brightness_display="bri: $brightness_percentage |"
            else
                brightness_display=""
            fi
        elif which wlr-randr &>/dev/null; then
            main_display="eDP-1"
            uname -r | grep "pinetab2" &>/dev/null && main_display="DSI-1"
            enabled=$(wlr-randr | grep "$main_display" -A5 | grep 'Enabled' | awk -F': ' '{print $2}')

            if [[ $enabled == "yes" ]]
            then
                brightness_percentage=$(brightness)
                [[ -n $brightness_percentage ]] && brightness_display="bri: $brightness_percentage |"
            else
                brightness_display=""
            fi
        fi

        echo "$brightness_display" > $CACHE_BRIGHTNESS_FILE
    fi


    if [[ $volume_flag == true ]]
    then
        unset volume_display
        volume_percentage=$(volume)
        [[ -n $volume_percentage ]] && volume_display="vol: $volume_percentage% |"
        echo "$volume_display" > $CACHE_VOLUME_FILE
    fi


    if [[ $battery_flag == true ]]
    then
        unset battery_display
        # Get all batteries with capacities
        batt_array=$(ls /sys/class/power_supply/*/capacity 2>/dev/null)
        # Take the first battery with a capacity value as the default
        batt_path=$(dirname ${batt_array[0]} 2>/dev/null)
        batt_percentage=$(cat $batt_path/capacity 2>/dev/null)

        [[ "$(cat $batt_path/status 2> /dev/null)" == "Charging" ]] \
            && charging="+" \
            || charging="-"
        [[ $batt_percentage -gt 99 ]] && { batt_percentage=100; unset charging; } 
        [[ -n $batt_percentage ]] && battery_display="batt: $charging$batt_percentage% |"
        echo "$battery_display" > $CACHE_BATTERY_FILE
    fi


    if [[ $network_flag == true ]]
    then
        unset network_display
        #
        # Calculates the rx and tx usage of the network
        #
        RX_LOG_FILE=/tmp/net_rx.log
        TX_LOG_FILE=/tmp/net_tx.log

        [[ -f $RX_LOG_FILE ]] || echo "0" > $RX_LOG_FILE
        [[ -f $TX_LOG_FILE ]] || echo "0" > $TX_LOG_FILE

        rx_total=$(( $(cat /sys/class/net/*/statistics/rx_bytes | paste -sd '+') ))
        tx_total=$(( $(cat /sys/class/net/*/statistics/tx_bytes | paste -sd '+') ))
        rx_last=$(cat $RX_LOG_FILE)
        tx_last=$(cat $TX_LOG_FILE)

        rx_current=$(( $rx_total-$rx_last ))
        tx_current=$(( $tx_total-$tx_last ))

        current_combined_usage=$(numfmt --to iec $(( $rx_current+$tx_current )))

        echo $rx_total > $RX_LOG_FILE
        echo $tx_total > $TX_LOG_FILE

        # 
        # Yes, ethernet is suppose to only show if wifi isn't connected to a network
        #
        nmcli_device_output=$(nmcli d)

        for interface in 'ethernet' 'wifi'
        do
            devices="$(echo "$nmcli_device_output" | grep "$interface ")"
            if [[ -n "$devices" ]]
            then
                ssids="$(echo "$devices" | awk '{$1=$2=$3=""; print $0}' | awk '{$1=$1; print}')"
                while IFS= read -r ssid
                do
                    if ! echo "$ssid" | grep "\--" &>/dev/null
                    then
                        [[ -n "$ssid" ]] \
                            && network_display="$interface:$current_combined_usage:$ssid |"
                    fi
                done < <(echo "$ssids")
            fi
        done

        echo "$network_display" > $CACHE_NETWORK_FILE
    fi
    

    if [[ $weather_flag == true && -n "$LOCATION" ]]
    then
        unset weather_display
        echo "$weather_display" > $CACHE_WEATHER_FILE

        weather_data="$(curl -s wttr.in/columbus_nebraska?u\&format=%t+%w)"
        if [[ $? == 0 ]]
        then
            if ! echo "$weather_data" | grep -i "Sorry" &>/dev/null
            then
                real_temperature=$(echo "$weather_data" | awk '{print $1}' | tr -d "+")
                wind_speed=$(echo "$weather_data" | awk '{print $2}')
                weather_display="$real_temperature ($wind_speed) |"
                echo "$weather_display" > $CACHE_WEATHER_FILE
            fi
        fi
    fi

    if [[ $bluetooth_flag == true ]]
    then
        unset bluetooth_display

        if systemctl status bluetooth &> /dev/null 
        then
            bluetooth_display="bt: ON | "
            echo "$bluetooth_display" > $CACHE_BLUETOOTH_FILE
        else
            echo "$bluetooth_display" > $CACHE_BLUETOOTH_FILE
        fi
    fi

    if [[ -n "$WAYLAND_DISPLAY" ]]; then
        echo "$brightness_display $volume_display $battery_display $network_display $weather_display $bluetooth_display $(date +"%B %e %H:%M:%S")" \
            > /tmp/status_bar_info
    elif which dwm &>/dev/null; then
        xsetroot -name "$brightness_display $volume_display $battery_display $network_display $weather_display $bluetooth_display $(date +"%B %e %H:%M:%S")" 
    fi
}

update-status-bar $@
